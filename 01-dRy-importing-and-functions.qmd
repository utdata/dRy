---
title: "01-dRy-importing-and-functions"
format: html
---

# Don't Repeat Yourself in R
By Ella Barnes and Karina Kumar - Data Fellows of the Media Innovation Group at University of Texas at Austin.

## Goals of this session
- Import multiple files at once
- Create your own function
- Generate parameterized reports quickly

Why dRy? Our coding often requires repetitive processes. These tools can help you unnecessary repetition and maximize your efficiency. 

## The data

## How this lesson works

# Importing multiple files at once

## Set up

Importing our libraries

```{r}

#| label: setup
#| message: false
#| warning: false

library(tidyverse)
library(janitor)

```

Creating a list of file names

```{r}
#| label: import

taylor_files_list <- list.files(  #<1>
  "data-processed-taylor",        #<2>
  pattern = ".csv",               #<3>
  full.names = T                  #<4>
)

taylor_files_list
```

1. list.files()
2. where to get the file
3. pattern = how to find the files
4. full.names = T gets the full path name rather than just the file name

```{r}
#| label: combine-files 

# add set_names(basename) to create a column that has the file name
# add message and warning false 

taylor_songs <- taylor_files_list |> map( #<1>
  read_csv, #<2>
  col_types = cols(album = col_character())   # comment this out to see what happens #<3>
) |> list_rbind() |> #<4>
  clean_names() #<5>

taylor_songs |> glimpse()
```

1. map
2. read_csv
3. col_types
4. list_rbind()
5. clean_names()

# OYO: Importing multiple files at once - Power Outages

```{r}
#| label: import-oyo

#data-processed-power

#power_files_list <- 

```

```{r}
#| label: combine-files-oyo

#power_outages <-  NA

#power_outages |> glimpse()
```

How did we get to the chart...? 

# Creating your own function

We want to create a function that creates a graph we can change over and over again.

This is what the Taylor Swift song data looks like:

```{r}
taylor_songs |> head(50)
```
What do each of these columns mean?

Let's compare some of these columns in a graph.

```{r}
ggplot(taylor_songs, aes( #<1>
  x = duration_min, #<2>
  y = popularity)) + #<3>
  geom_point() #<4>
```

1. ggplot and aes
2. x value
3. y value
4. geom_point

All too well (10 minutes is an obvious outlier)

What if we wanted to make the same graph for multiple albums? Create our own function

```{r}
graphing_taylor <- function(song_data){
  ggplot(song_data, aes(x= duration_min, y = popularity)) +
    geom_point() +
    labs(x = "Length of song in minutes", y = "Popularity") +
    scale_x_continuous(n.breaks = 10) +
    scale_y_continuous(limits = c(0,100))}

```

```{r}
graphing_taylor(taylor_songs)
```

# OYO: Creating your own function

Let's look at the power outage data.

```{r}
#power_outages |> head(50)
```

Now make your own function that creates a bar chart for any state comparing BLANK AND BLANK

```{r}
# graphing_power <- 
```

